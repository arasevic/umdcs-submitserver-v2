
* Quick start for local development

(Install PostgreSQL,) set up the PostgreSQL database.

#+BEGIN_SRC sh :eval no
  su                           # log in as root
  su -l postgres               # log in as postgres user
  createuser submitserver
  createdb -O submitserver umdcs-submitserver-v2-dev
#+END_SRC

Install the =backend= node dependencies.

#+BEGIN_SRC sh :eval no
  cd backend/
  npm install
#+END_SRC

Define the tables and seed the development DB.

#+BEGIN_SRC sh :eval no
  cd backend/
  ./node_modules/.bin/sequelize db:migrate
  ./node_modules/.bin/sequelize db:seed:all
#+END_SRC

Start the backend API.

#+BEGIN_SRC sh :eval no
  cd backend/
  npm start
#+END_SRC

Install the =web client= node dependencies.

#+BEGIN_SRC sh :eval no
  cd clients/web/
  npm install
#+END_SRC

Start the web client.

#+BEGIN_SRC sh :eval no
  cd clients/web/
  npm start
#+END_SRC

Log in to web client. The password field of the login page is
ignored, since Shibboleth authentication is not yet integrated,
so to log in enter any of the example users' usernames.

Example users:
|----------------+------------+----------------------------------|
| Name           | Username   | Permissions                      |
|----------------+------------+----------------------------------|
| Nikola         | nikola     | cmsc131-student, cmsc430-ta      |
| Aleksandra     | aleksandra | cmsc430-student                  |
| Michele        | mca        | cmsc131-student, cmsc430-student |
| Thomas Gilray  | tgilray    | cmsc430-prof                     |
| Javran Cheng   | javran     | cmsc430-ta                       |
| David Van Horn | dvh        | cmsc131-prof                     |
| Nick           | labichn    | admin                            |
|----------------+------------+----------------------------------|


* Server

** Tasks

*** TODO Integrate Shibboleth authentication

Who is our point of contact to integrate UMD auth?

*** TODO Testing workflow

1. Allow professors to submit a Docker container for a
   particular assignment.
2. Place submitted code on a queue to be spun up.
3. Store output from executing the submitted code in the
   test container.

** Environment Variables

*** For Production/Staging

[[./backend/.env][Set in the backend dotenv file]]

These environment variables must be set:
- PORT           -- the port on which to run the server
- DB_URI         -- the MongoDB URI
- SESSION_SECRET -- secret used by client-sessions
- DEBUG          -- * for full debug logging, empty for none
- POSTGRES_USER  -- user with read/write access to Postgres DB
- POSTGRES_PASS  -- password for Postgres DB
- POSTGRES_DB    -- Postgres DB name
- POSTGRES_HOST  -- Postgres DB host URI (e.g. 127.0.0.1)
- POSTGRES_PORT  -- Postgres DB port (e.g. 5432)

*** For local development

The Postgres-specific environment variables are configured in
the Sequelize model configuration file: [[./backend/config/config.js][here]].

** Persistent Data

The submit server data is stored in a PostgreSQL database.

*** Initialization

We connect to the submit server database
=umdcs-submitserver-v2-{dev,test,prod}= as the user
=submitserver=. The instructions below do not include a
password, though a password should be used in the production
environment.

**** Creating the submit server DB user and databases

These commands should be run by the cluster owner (default:
=postgres=).

#+BEGIN_SRC sh :eval no
  createuser -P submitserver
  createdb -O submitserver umdcs-submitserver-v2-dev  # if in dev environment
  createdb -O submitserver umdcs-submitserver-v2-test # if in test environment
  createdb -O submitserver umdcs-submitserver-v2-prod # if in prod environment
#+END_SRC

**** Table initialization via Sequelize CLI

The configuration for the Sequelize ORM is [[./backend/config/config.json][here]], which
references environment variables defined in the =dotenv= file
[[./backend/.env][here]].

To initialize the submit server database tables, run the
following command from the =backend= directory (after
installing the node modules).

#+BEGIN_SRC sh :eval no
  ./node_modules/.bin/sequelize db:migrate
#+END_SRC

To seed a development database with test data, run the
following command.

#+BEGIN_SRC sh :eval no
  ./node_modules/.bin/sequelize db:seed:all
#+END_SRC

**** Future table migrations

To manage table schema changes, follow the Sequelize
documentation that pertains to Migrations:
http://docs.sequelizejs.com/manual/tutorial/migrations.html.


*** [[./backend/models/user.js][User]]

A user has a username, a (display) name, a global role, and an
array of courses to which they have access. Only admins use the
global role field, other users permissions are stored as rows
in the Permissions table.

The User schema will likely need to be extended to support
shibboleth authentication, the username is a stand-in for any
identifying information we will need to store.

A user's level of access to the content of some course is
determined by their courses document role:
- 'admin'   -- full access to the submit server data;
- 'prof'    -- read/write access to their course TA roster,
               read/write access to their course assignments,
               read access to their course student submissions;
- 'ta'      -- read/write access to their course assignments,
               read access to their course student submissions;
- 'student' -- read access to their course assignments,
               read/create access to their submissions.

Since some students may TA for one course and be enrolled as a
student in another, roles must be defined on a per-course
basis.

*** [[./backend/models/course.js][Course]]

A course has a name, course number (e.g. 'cmsc430'), and an
array of defined assignments.

*** [[./backend/models/assignment.js][Assignment]]

An assignment has a name, a due date, a boolean flag listing
whether the assignment is already visible to students, and an
array of submissions received from students.

Assignments will also need to store information about how
testing will be performed on student submissions, such as a
reference to a docker instance stored in our private registry.

*** [[./backend/models/submission.js][Submission]]

A submission has an associated user, the date at which the
submission was made, the submitted input, and the output as a
result of testing the submission.

The input field is the raw binary data of the uploaded file.

*** [[./backend/models/permission.js][Permissions]]

A permissions entry has a user ID, course ID, and role. This
table defines the role with which some user has access to some
course.


** Routes

*** [[./backend/routes/index.js][Index]]

GET of the index should eventually describe the API.

*** [[./backend/routes/auth.js][Auth]]

The authentication routes are a temporary stand-in for what
will eventually handle the Shibboleth session maintenance and
mapping to the submit server permissions and state.

Session state is stored using encrypted client
cookies. Clients request a JSON authentication token that
describes the user and the courses/roles to which they have
access via the '/api/check' route.

As currently implemented, the '/api/login' route allows login
by username alone, as long as the username matches some
existing user. This is for development purposes only.

*** [[./backend/routes/model/index.js][Model]]

The model CRUD routes are dynamically generated based on the
Sequelize models.



* Client

** Tasks

*** TODO Shibboleth authentication integration

*** TODO Style the web client to be accessible, clear, and concise


** [[./clients/web/src/components/Auth.js][Auth]]

The client-side authentication and authorization session and
operations are maintained by a React Context. The context
is responsible for checking the current authentication state
on mount, and provides the session token and useful operations
to any consumer.

The higher-order component `withAuth' wraps any component in
an authentication consumer, which exposes the session token
and authentication operations to the component via its props.

The component `PrivateRoute' describes components that are
only available to logged in users, causing a redirect to the
login page if an attempt to access protected information is
made by an unauthenticated user.

** Pages

*** [[./clients/web/src/pages/Courses.js][Courses]]

Displays the courses to which a user has access.

*** [[./clients/web/src/pages/Course/index.js][Course]]

Displays the details of a single course. Students can see all
visible assignments. Professors and TAs can see all
assignments (both visible and invisible) and a form to create
new assignments.

*** [[./clients/web/src/pages/Assignment/index.js][Assignment]]

Display the details of a single assignment. Students can see
and download all their past submissions. Professors and TAs can
see and download all student submissions, as well as edit
assignment details.
